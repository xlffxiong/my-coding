
运行原理：
原理：jenkins上的执行器是通过rancher管理，运行在多个虚拟机上, 所以可以通过登录rancher进入执行器操作
参考以下
https://blog.csdn.net/weixin_47055136/article/details/132067384?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-132067384-blog-105292756.235%5Ev40%5Epc_relevant_3m_sort_dl_base2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-132067384-blog-105292756.235%5Ev40%5Epc_relevant_3m_sort_dl_base2&utm_relevant_index=4

大概是这个
```
Rancher 是一个开源的容器管理平台，它可以用来部署和管理容器化的应用程序。Jenkins 是一个开源的自动化服务器，用于自动化软件开发的构建、测试和部署。

如果你想要使用 Rancher 来管理 Jenkins 上的执行器（也就是 Jenkins 的 agent 或者 slave），你可以通过在 Rancher 上部署 Jenkins 的执行器作为容器来实现。以下是一个基本的步骤指南：

准备 Jenkins 主服务器：
确保你的 Jenkins 主服务器已经运行，并且可以从 Rancher 管理的集群中访问。

创建 Jenkins 执行器的 Docker 镜像：
你可以使用 Jenkins 官方提供的 jnlp-slave 镜像，或者根据需要自定义一个 Dockerfile 来创建你自己的 Jenkins 执行器镜像。

在 Rancher 上部署 Jenkins 执行器：
在 Rancher 的界面中，你可以创建一个新的工作负载来部署 Jenkins 执行器容器。你需要确保执行器容器可以与 Jenkins 主服务器通信，并且配置适当的环境变量，如 JENKINS_URL（Jenkins 主服务器的 URL）、JENKINS_SECRET（执行器的连接密钥）和 JENKINS_AGENT_NAME（执行器的名称）。

配置 Jenkins 主服务器：
在 Jenkins 主服务器上，你需要配置一个新的节点，并选择 "Launch agent via Java Web Start"（通过 Java Web Start 启动代理）。在节点配置中，你需要输入在 Rancher 部署的执行器容器的相关信息。

启动执行器并连接到 Jenkins：
当 Rancher 部署的 Jenkins 执行器容器启动时，它会尝试连接到 Jenkins 主服务器。如果配置正确，它将会作为一个节点出现在 Jenkins 的节点列表中，并可以接受任务并执行构建。
```

https://blog.csdn.net/g950904/article/details/109753953?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-12-109753953-blog-132067384.235^v40^pc_relevant_3m_sort_dl_base2&spm=1001.2101.3001.4242.7&utm_relevant_index=15

stage('Prepare Env')
1、分配执行机
  执行机本质是rancher管理的虚拟机
日志： running on xxx in {jenkins服务器代码目录}，注意代码目录固定
2、环境准备
  2.1 清理之前的allure报告
  2.2 清理之前的录像和截图
  2.3 清理之前的代码（每次均需要重新拉取最新代码）
  2.4 是否延迟构建
3、代码准备
  3.1 jenkins配置和github的凭证，使用该凭证拉取用例代码，
  3.2 删除一些linux不能用的依赖  sed -i s#pywin32##g requirements.txt
  3.3 依赖相关使用pip拉取或卸载 
      卸载已存在的，安装最新的   
    sh "python3.10 -m pip uninstall -y pp-scp sd-scp docker docker-py"
    sh "python3.10 -m pip install pymysql"
    sh "python3.10 -m pip install -r requirements.txt"
  3.4 若存在多个代码分支，如e-cloud 和epoch
    1）可以选择基于3.1安装依赖
    2）重新拉取新项目，再次安装依赖
stage('Test Run')
4、运行pytest
  4.1 删除缓存文件 rm -rf /home/jenkins/workspace/NG_PyTest_Py3/pytest_cache.tar.gz
  4.2 构建pytest 运行tag,如  (mark_level__bvt or mark_level__level1 or mark_level__level2 or mark_level__level3) and (mark_status__stable and mark_layer__system) and (mark_tl__tl2)
(mark_level__bvt or mark_level__level1 or mark_level__level2 or mark_level__level3) and (mark_status__stable and mark_layer__system) and (mark_tl__tl2)
  4.3 运行 
   python3.10 -m pytest e-cloud/am/cases/ske/platform_feature/privilege -m (mark_level__bvt or mark_level__level1 or mark_level__level2 or mark_level__level3) and (mark_status__stable and mark_layer__system) and (mark_tl__tl2) -s -v 
--reruns 0 --show-capture=stderr --durations=30 --alluredir /var/reportCacheHub/QA-TestCI/NG_PyTest_Py3/25506/rspec_reports --collect-only
    此时可以判断是否有按照失败的缓存文件构建的用例，如果存在，按照缓存构建，否则按照正常构建
post {
      always {
    4.4 archiveArtifacts 保存产物 'pytest_cache.tar.gz'
      ```
      archiveArtifacts 是一个在持续集成/持续部署（CI/CD）中常用的术语，特别是在 Jenkins 这类自动化服务器中。它指的是在构建过程结束后，将生成的构建产物（如编译后的二进制文件、日志文件、测试报告等）保存起来的操作。
      
      在 Jenkins 中，archiveArtifacts 是一个步骤（step），可以在 Jenkinsfile（Jenkins 的管道配置文件）中使用，用于指定哪些文件或目录应该被归档和保存。这样做的目的是为了保留构建的历史记录，以便将来可以回溯和分析
      ```
  }
    aborted {
        sh'pkill -2 python'
        sh 'release env'
        sh 'recover source'
    }
  fail
  https://github.com/jenkinsci/allure-plugin/issues/163
部署流程参考这个
https://blog.51cto.com/zhangxueliang/8767156
https://blog.csdn.net/g950904/article/details/109753953?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-12-109753953-blog-132067384.235^v40^pc_relevant_3m_sort_dl_base2&spm=1001.2101.3001.4242.7&utm_relevant_index=15
https://blog.csdn.net/weixin_47055136/article/details/132067384?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-132067384-blog-105292756.235%5Ev40%5Epc_relevant_3m_sort_dl_base2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-132067384-blog-105292756.235%5Ev40%5Epc_relevant_3m_sort_dl_base2&utm_relevant_index=4



  UI创建容器
docker run -d -P --name=xxx_chrome_debug --privileged=true --user=root -e VNC_NO_PASSWORD=1 -e SCREEN_WIDTH=1920 -e SCREEN_HEIGHT=1080 -e SE_OPTS='-sessionTimeout 7200' -v /sf/dir_ci/salmon/images/:/var/salmon_images -v /sf/dir_ci/salmon/mount:/tmp/salmon_mount -v /tmp/chrome_downloads:/home/seluser/Downloads --shm-size=256MB standalone-chrome-salmon
=================
UI使用的镜像是  https://hub.docker.com/r/selenium/standalone-chrome
docker run：Docker 的命令，用于运行一个新的容器。
-d：以分离模式运行容器，即在后台运行。
-P：将容器的所有端口映射到主机。
--name=xxx_chrome_debug：设置容器的名称为 xxx_chrome_debug。
--privileged=true：以特权模式运行容器。
--user=root：以 root 用户身份运行容器。
-e VNC_NO_PASSWORD=1：设置环境变量 VNC_NO_PASSWORD 的值为 1。
-e SCREEN_WIDTH=1920 -e SCREEN_HEIGHT=1080：设置环境变量 SCREEN_WIDTH 和 SCREEN_HEIGHT 的值，分别为 1920 和 1080，这可能是用于设置 VNC 服务的屏幕分辨率。
-e SE_OPTS='-sessionTimeout 7200'：设置环境变量 SE_OPTS 的值为 -sessionTimeout 7200，这是用于设置 Selenium 服务器的会话超时时间，单位是秒。
-v /sf/dir_ci/salmon/images/:/var/salmon_images：将主机的 /sf/dir_ci/salmon/images/ 目录挂载到容器的 /var/salmon_images 目录。
-v /sf/dir_ci/salmon/mount:/tmp/salmon_mount：将主机的 /sf/dir_ci/salmon/mount 目录挂载到容器的 /tmp/salmon_mount 目录。
-v /tmp/chrome_downloads:/home/seluser/Downloads：将主机的 /tmp/chrome_downloads 目录挂载到容器的 /home/seluser/Downloads 目录。
--shm-size=256MB：设置容器的共享内存大小为 256MB。
standalone-chrome-salmon：要运行的 Docker 镜像的名称。
这条命令的主要目的是运行一个名为 standalone-chrome-salmon 的 Docker 镜像，并进行一些特定的设置，如设置环境变量、挂载目录、设置共享
=====================
jenkins的执行机是通过 rancher管理的  https://blog.csdn.net/qq_39093474/article/details/132154723
===========================
新自动化物理拓扑
1、需要三台物理机组成的集群
其中存在一个虚拟机A,B,C..N
jenkins部署在A上，部署形态为容器，B-N作为从节点加入jenkins集群中，N+1个节点作为部署UI容器的宿主机
每个节点起多个容器作为执行机（执行机拉取代码，执行代码），其中存在一个节点部署rancher作为管理执行机的中枢，负责节点的执行机的上线下线
1）接口自动化直接在执行机执行
2）UI自动化，此时会在第N+1个节点部署UI容器，然后在执行机x中远程连接UI容器执行UI操作，非UI操作直接在执行机执行

================================================
1. 安装 Jenkins
访问 Jenkins 官网 下载 Jenkins。
根据你的操作系统安装 Jenkins（Windows、Linux 或 macOS）。
启动 Jenkins 并通过浏览器访问 Jenkins 的 Web 界面（通常是 http://localhost:8080）。
完成初始设置，包括解锁 Jenkins、创建管理员用户等。
2. 安装必要的 Jenkins 插件
在 Jenkins 的管理界面中，选择“管理 Jenkins” -> “管理插件”。
安装 GitHub、Git、Pipeline 以及任何与你的 UI 自动化框架相关的插件（例如 Selenium 插件）。
3. 配置 Jenkins 与 GitHub 的集成
在 GitHub 上生成一个访问令牌（Personal Access Token）。
在 Jenkins 中配置 GitHub 服务器，添加你的 GitHub 凭据。
设置 Webhook，以便在 GitHub 上有新的提交时，能够触发 Jenkins 构建。
4. 创建 Jenkins Job
在 Jenkins 中创建一个新的任务（Job）或流水线（Pipeline）。
配置源码管理，指定你的 GitHub 仓库 URL 和分支。
配置构建触发器，例如通过 GitHub Webhook 触发或定时触发。
5. 编写 Jenkinsfile（如果使用 Pipeline）
在你的项目根目录中创建一个 Jenkinsfile。
定义 Pipeline 的各个阶段，包括拉取代码、运行测试、打包、部署等。
6. 配置 UI 自动化测试环境
确保你的 Jenkins 服务器上安装了所有必要的浏览器和驱动程序（如 ChromeDriver、GeckoDriver 等）。
如果使用容器化技术（如 Docker），确保 Jenkins 有权限运行 Docker 命令，并且配置好相关的 Docker 镜像。
7. 编写 UI 自动化测试脚本
根据你选择的 UI 自动化框架（如 Selenium、Appium、Cypress 等），编写自动化测试脚本。
确保测试脚本可以在本地执行并通过。
8. 集成 UI 自动化测试到 Jenkins Pipeline
在 Jenkinsfile 中添加运行 UI 自动化测试的步骤。
配置测试结果的报告和存档。
9. 测试和调试
执行 Jenkins Job，确保所有步骤都能正确运行。
调试任何失败的步骤，查看日志以确定问题所在。
10. 维护和优化
定期检查你的 CI 环境，确保一切运行顺畅。
根据需要更新和优化你的 Jenkinsfile 和测试脚本。
=========================================================
jenkins存在多个从节点，如何调度执行机执行job

在 Jenkins 中，可以通过多种方式来调度作业（Job）在不同的从节点（Slave）或执行机（Agent）上执行。以下是一些常见的调度策略：

标签表达式（Label Expression）:
在配置作业时，可以指定一个或多个标签来限制作业只能在具有这些标签的节点上运行。例如，如果你有两个从节点，分别标记为 linux 和 windows，你可以在作业配置中设置标签表达式为 linux，那么这个作业就只会在标记为 linux 的节点上运行。

节点指定（Node Assignment）:
在作业配置中，可以直接指定一个特定的节点名称，使得作业只能在该节点上运行。

使用插件:
有许多 Jenkins 插件可以提供更高级的调度功能。例如：

NodeLabel Parameter Plugin: 允许在构建时动态选择节点或标签。
Throttle Concurrent Builds Plugin: 可以限制在特定节点或具有特定标签的节点上并发运行的作业数量。
Elastic Axis Plugin: 允许根据可用的节点动态分配作业。
负载均衡:
Jenkins 默认会尝试在节点之间分配作业，以保持负载均衡。如果没有特别指定节点或标签，Jenkins 会选择一个最适合的节点来执行作业。

脚本化和管道:
如果你使用 Jenkins Pipeline，可以在 Jenkinsfile 中使用 Groovy 脚本来动态选择节点。例如：

groovy
pipeline {
    agent none // 不在顶层指定执行器
    stages {
        stage('Build') {
            agent { label 'linux' } // 在这个阶段选择具有 'linux' 标签的节点
            steps {
                // 构建步骤
            }
        }
        stage('Test') {
            agent { label 'windows' } // 在这个阶段选择具有 'windows' 标签的节点
            steps {
                // 测试步骤
            }
        }
    }
}
优先级队列插件:
使用如 Priority Sorter Plugin 这样的插件可以根据预定义的规则来调度作业，例如基于作业的优先级或其他标准。

在实际操作中，你可能需要根据具体的需求和环境来选择最合适的调度策略。记得在调度作业之前，确保你的从节点已经正确连接到 Jenkins 主节点，并且具有正确的标签和配置。
====================================================================

